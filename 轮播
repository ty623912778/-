#import <UIKit/UIKit.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;


@end

#import "AppDelegate.h"
#import "ViewController.h"

@interface AppDelegate ()

@end

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    _window= [[UIWindow alloc]initWithFrame:CGRectMake(0, 0, 375,667 )];
    
    _window.backgroundColor=[UIColor whiteColor];
    _window.rootViewController=nil;
  
    ViewController *vc=[[ViewController alloc]init];
    UINavigationController* nv=[[UINavigationController alloc]initWithRootViewController:vc];
    _window.rootViewController=nv;
    [_window makeKeyAndVisible];
    
    
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application {
   
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
   
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
  
}

- (void)applicationWillTerminate:(UIApplication *)application {
   
}
@end
#import <UIKit/UIKit.h>

@interface ViewController : UIViewController


@end

#import "ViewController.h"
#import "ViewController1.h"
@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor=[UIColor blackColor] ;
    UIButton *button=[UIButton buttonWithType:UIButtonTypeCustom];
    button.frame=CGRectMake(100, 80, 175, 30);
    [button setTitle:@"进入" forState:UIControlStateNormal];
    
    
    [button setTitleColor:[UIColor blackColor] forState:UIControlStateHighlighted];
    [self.view addSubview:button];
     [button addTarget: self action: @selector(click:) forControlEvents:(UIControlEventTouchUpInside)];
    
    
}

-(void)click:(UIButton *)sender
{
    
    ViewController1 *vc1=[[ViewController1 alloc ]init ];
    
    
    
    [self.navigationController pushViewController:vc1
                                         animated:YES];
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end

#import <UIKit/UIKit.h>

@interface ViewController1 : UIViewController<UIScrollViewDelegate>
@property (nonatomic,retain) UIScrollView *scrollView;
@property (nonatomic,retain) UIPageControl *pageControl;
@property (nonatomic,strong)NSTimer *timer;
@end
#import "ViewController1.h"
#import "ViewController.h"

@interface ViewController1 ()

@end

@implementation ViewController1

-(void)dealloc{
    self.scrollView = nil;
    self.pageControl = nil;
    
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor=[UIColor whiteColor];
     [self layout];
    
    
}

-(void)layout{
  
    self.scrollView = [[UIScrollView alloc]initWithFrame:CGRectMake(0,50, 375, 600)];
    [self.view addSubview:_scrollView];
    
   
    self.pageControl = [[UIPageControl alloc]initWithFrame:CGRectMake(0, 200, 375, 600)];
    
    [self.view addSubview:_pageControl];
  
    
    int count = 5;
    CGSize size = self.scrollView.frame.size;
    
    for (int i = 0; i < count; i++) {
      
        UIImageView *iconView = [[UIImageView alloc] init];
        [self.scrollView addSubview:iconView];
        
        NSString *imgName = [NSString stringWithFormat:@"%d.png",i+1];
        iconView.image = [UIImage imageNamed:imgName];
        
        CGFloat x = i * size.width;
        
        iconView.frame = CGRectMake(x, 0, size.width, size.height);
    }
  
    self.scrollView.contentSize = CGSizeMake(count * size.width, 0);
    self.scrollView.showsHorizontalScrollIndicator = NO;
    
    self.scrollView.pagingEnabled = YES;
    
   
    self.pageControl.numberOfPages = count;
    self.pageControl.currentPageIndicatorTintColor = [UIColor blueColor];
    self.pageControl.pageIndicatorTintColor = [UIColor blackColor];
    
    self.scrollView.delegate = self;
   
    [self addTimerTask];
 
}


-(void)addTimerTask{
   
    NSTimer *timer = [NSTimer timerWithTimeInterval:5.0 target:self selector:@selector(nextImage) userInfo:nil repeats:YES];
    
    self.timer = timer;
    

    NSRunLoop *runloop = [NSRunLoop currentRunLoop];
   
    [runloop addTimer:timer forMode:NSDefaultRunLoopMode];
    
    
    
}


-(void)nextImage{
  
    NSInteger page = self.pageControl.currentPage;
    
    if (page == self.pageControl.numberOfPages - 1) {
        page = 0;
       
        _scrollView.contentOffset = CGPointMake(50, 0);
        [_scrollView setContentOffset:_scrollView.contentOffset animated:YES];
    }else{
        page++;
    }
    
    
    CGFloat offsetX = page * self.scrollView.frame.size.width;
    [UIView animateWithDuration:1.0 animations:^{
        self.scrollView.contentOffset = CGPointMake(offsetX, 0);
    }];
}


-(void)scrollViewDidScroll:(UIScrollView *)scrollView{
  
    int page = (scrollView.contentOffset.x + scrollView.frame.size.width / 2)/ scrollView.frame.size.width;
    self.pageControl.currentPage = page;
}

-(void)scrollViewWillBeginDragging:(UIScrollView *)scrollView{
    
    [self.timer invalidate];
}

-(void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
    
    
    [self addTimerTask];
}


- (void)didReceiveMemoryWarning

{
    
    [super didReceiveMemoryWarning];
    
    
    
}




@end
